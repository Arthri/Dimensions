import * as http from 'http';

export interface BlackListCache {
    isHostIP: boolean;
    expires: number;
}

class Blacklist {
    static cache: Array<BlackListCache> = [];

    static checkIP(ip: string, key: string) {
        return new Promise<boolean>((resolve, reject) => {
            if (typeof this.cache[ip] !== 'undefined' && this.cache[ip].expires > Date.now()) {
                resolve(this.cache[ip].isHostIP);
                return;
            }

            http.get(`http://tools.xioax.com/networking/ip/${ip}/${key}`, (res) => {
                let data = "";
                res.on("data", (chunk) => {
                    data += chunk;
                });

                res.on("end", () => {
                    this.parseResponse(ip, data, resolve, reject);
                });
            }).on('error', (e) => {
                reject(e);
            });
        });
    }

    static parseResponse(ip: string, data: string, resolve: (value?: boolean) => void, reject: (error: Error | string) => void): void {
        let resDetails: any;
        try {
            resDetails = JSON.parse(data);
        } catch(e) {
            reject(e);
        }

        if (resDetails.status !== 'success') {
            reject(new Error("Invalid API call."));
        } else {
            let expireTime = Date.now();
            expireTime += 1000 * 60 * 30;
            this.cache[ip] = {
                isHostIP: resDetails["host-ip"],
                expires: expireTime
            };
            resolve(resDetails["host-ip"]);
        }
    }
}

export default Blacklist;