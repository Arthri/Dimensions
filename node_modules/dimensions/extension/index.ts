import Client from 'dimensions/client';
import ClientPacketHandler from 'dimensions/extension/clientpackethandler';
import TerrariaServerPacketHandler from 'dimensions/extension/terrariaserverpackethandler';
import ListenServer from 'dimensions/listenserver';
import TerrariaServer from 'dimensions/terrariaserver';
import { Socket } from 'net';

export interface PacketHandler {
    clientHandler?: ClientPacketHandler;
    serverHandler?: TerrariaServerPacketHandler;
}

export type ClientErrorHandler = (client: Client, error: Error) => boolean;
export type ServerErrorHandler = (server: TerrariaServer, error: Error) => boolean;
export type ClientDisconnectHandler = (client: Client) => boolean;
export type ServerDisconnectHandler = (server: TerrariaServer) => boolean;
export type SocketConnectPreHandler = (socket: Socket) => Promise<boolean>;
export type SocketConnectPostHandler = (socket: Socket) => void;
export type ClientFullyConnectedHandler = (client: Client) => void;

export interface Extension {
    name: string;
    version: string;
    author: string;
    reloadable: boolean;
    reloadName?: string;
    setListenServers?: (listenServers: { [name: string]: ListenServer }) => void;

    // Reloading
    reload?: (require: any) => void;

    // Packet Handling
    priorPacketHandlers?: PacketHandler;
    postPacketHandlers?: PacketHandler;

    // Error Handling
    clientErrorHandler?: ClientErrorHandler;
    serverErrorHandler?: ServerErrorHandler;

    socketConnectPreHandler?: SocketConnectPreHandler;
    socketConnectPostHandler?: SocketConnectPostHandler;

    clientFullyConnectedHandler?: ClientFullyConnectedHandler;

    // Socket close Handling
    clientDisconnectPreHandler?: ClientDisconnectHandler;
    clientDisconnectHandler?: ClientDisconnectHandler;
    serverDisconnectPreHandler?: ServerDisconnectHandler;
    serverDisconnectHandler?: ServerDisconnectHandler;
}

export default Extension;