import Color from 'dimensions/color';
import { hex2a } from 'dimensions/utils';

class HexReader {
  protected _data: string;

  constructor(data: string) {
    this._data = data;
  }

  readByte(): number {
    // Read byte and convert to int
    let byte: number = parseInt(this._data.substr(0, 2), 16);

    // Chop off read data
    this._data = this._data.substr(2);

    return byte;
  }

  readColor(): Color {
    let color = {
      R: this.readByte(),
      G: this.readByte(),
      B: this.readByte()
    };

    return color;
  }

  readSByte(): number {
    let byte: number = parseInt(this._data.substr(0, 2), 16);

    // Chop off read data
    this._data = this._data.substr(2);

    let binaryValues: Object = {
      0: 1,
      1: 2,
      2: 4,
      3: 8,
      4: 16,
      5: 32,
      6: 64,
      7: 128
    };

    // Convert byte to signed
    let sbyte: number = 0;
    for (let i: number = 7; i >= 0; i--) {
      if ((byte & binaryValues[i]) === binaryValues[i]) {
        if (binaryValues[i] === 128) {
          sbyte = -128;
        } else {
          sbyte += binaryValues[i];
        }
      }
    }

    return sbyte;
  }

  readInt16(): number {
    // Read bytes
    let firstByte: string = this._data.substr(2, 2);
    let secondByte: string = this._data.substr(0, 2);

    // Convert to int
    let int16: number = parseInt(firstByte + secondByte, 16);

    // Chop off read data
    this._data = this._data.substr(4);

    return int16;
  }

  readInt32(): number {
    // Read bytes
    let firstByte: string = this._data.substr(6, 2);
    let secondByte: string = this._data.substr(4, 2);
    let thirdByte: string = this._data.substr(2, 2);
    let fourthByte: string = this._data.substr(0, 2);

    // Convert to int
    let int32: number = parseInt(firstByte + secondByte + thirdByte + fourthByte, 16);

    // Chop off read data
    this._data = this._data.substr(8);

    return int32;
  }

  readSingle(): number {
    // Get hex string
    let hex: string = this._data.substr(0, 8);

    // Use buffer to read Float
    let buf: Buffer = new Buffer(hex, 'hex');
    let single: number = buf.readFloatLE(0);

    // Chop off read data
    this._data = this._data.substr(8);

    return single;
  }

  readString(): string {
    // Read string length
    let firstByte: number = parseInt(this._data.substr(0, 2), 16);
    let strLength: number = firstByte;
    let digitOffset = 2;
    if (firstByte >= 128) {
      let secondByte: string = this._data.substr(2, 2);
      strLength = firstByte + (parseInt(secondByte, 16) - 1) * 128;
      digitOffset = 4;
    }

    // The used string length is in hex digits rather than characters
    strLength *= 2;

    // Read string content using length
    let strContent: string = hex2a(this._data.substr(digitOffset, strLength));

    // Chop off read data
    this._data = this._data.substr(digitOffset + strLength);
    return strContent;
  }
}

export default HexReader;