import HexWriter from 'dimensions/packets/hexwriter';
import { a2hex, getCorrectHex, getPacketLengthFromData } from 'dimensions/utils';
import Color from 'dimensions/color';

class PacketWriter extends HexWriter {
    constructor() {
        super();
        this._data = "0000";
    }

    public setType(type: number): PacketWriter {
        let typeHex: string = (type).toString(16);
        // Length must be even
        if (typeHex.length % 2 !== 0) {
            typeHex = "0" + typeHex;
        }

        this._data = this._data.substr(0, 4) + typeHex + this._data.substr(6);
        this.updateLength();
        return this;
    }

    public packString(str: string): PacketWriter {
        super.packString(str);
        this.updateLength();
        return this;
    }

    public packHex(hex: string): PacketWriter {
        super.packHex(hex);
        this.updateLength();
        return this;
    }

    public packByte(byte: number): PacketWriter {
        super.packByte(byte);
        this.updateLength();
        return this;
    }

    public packColor(color: Color): PacketWriter {
        super.packColor(color);
        return this;
    }

    public packInt16(int16: number): PacketWriter {
        super.packInt16(int16);
        this.updateLength();
        return this;
    }

    public packInt32(int32: number): PacketWriter {
        super.packInt32(int32);
        this.updateLength();
        return this;
    }

    public packSingle(float: number): PacketWriter {
        super.packSingle(float);
        this.updateLength();
        return this;
    }

    protected updateLength(): void {
        this._data = getPacketLengthFromData(this._data.substr(4)) + this._data.substr(4);
    }
}

export default PacketWriter;